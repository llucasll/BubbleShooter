
	A estrutura do jogo foi dividida seguindo alguns conceitos de MVC.
	Os arquivos são numerados com um código, que antecede seu nome, seguindo a numenclatura:

	0. Inicializações básicas
	1. Dados
	2. Controle
	3. Visualização
*/


 * 06_moving_images.c
 * Este programa move uma imagem pela tela. Ao colidir com uma parede a imagem irá ser refletida.
 * 2016/01/26
 * @adriano cruz
 */
 

	Convenções de nomenclatura:
	
	* Variável/Função - primeiroSegundo
	* Tipos personalizados - PrimeiroSegundo
*/


	chamadas à lib
	macros
	tipos
	protótipos
	globais

	func's de dados

	mecânica
	exibição/apresentação

	controle(geral)

	main

	//

	CABECALHO.H
		chamadas à lib
		macros
		-chamada a dados.h
		globais
	
	DADOS.H
		tipos
		func's de dados
		
	//
	
	APRESENTACAO.H
		exibição/apresentação
	MECANICA.H
		mecânica
	
	CONTROLE.C
		controle(geral)
	
	//
	
	CONTROLE.H
		controle(geral)
	
	MAIN.C
		main
	
	//
	
	DADOS.C
		func's de dados

	MECANICA.C, APRESENTACAO.C	
		mecânica
		exibição/apresentação
*/

#include "../lib-headers/iu.h"

TALVEZ VALESSE MAIS USAR APENAS PROTÓTIPOS, PARA EVITAR "JÁ DEFINIDO"
#include "0.all.h"
#include "0.cabecalho.c"

#include "2.controle.c"
#include "2.mecanica.c"
#include "3.iu.c"
#include "main.c"

	#include "1.dados.h" //define os tipos
	//#include "0.cabecalho.h" //define constantes, globais, etc
	#include "1.dados.h" //define as funções, etc

*/

{
	#define ncores 6

	typedef struct{
		char caminho[100];
	}Cor;

	Cor cor[ncores]={
		{"azul.jpg"},
		{"vermelho.png"},
		{"verde.jpg"},
		{"amarelo.png"},
		{"cinza.jpg"},
		{".png"}
	};

	Bola *b = get(x,y);
	cor[b->cor].caminho;
}

sortear(){
	return rand(ncores);
}

insere(byte cor, byte x, byte y){
	

init(){
	//...
	Surface imagens[ncores];
	for(int i; i<ncores; i++){
		imagens[i] = SDL_get_surface(cor[i].caminho);
		imagens[i] = loadSurface(cor[i].caminho);
	}
	//...
	
	Bola *m[][] = malloc(tam.linhas);
	for(int i; i<tam.linhas; i++)
		m[i] = malloc(tam.colunas);
	//linkar ponteiros ds bolas entre si
	
	//int x=3;
	for(int x=0; x<tam.tela.x; x++)
		for(int y=0; y<tam.tela.y; y++)
			insere(sortear(),x,y);
}
	
imprime(Bola b){
	Surface img = imagens[b->cor];
	SDL_imprime(img,x,y);
}

/* VARIÁVEIS */

Bola *primeiraLinha[] //vetor d ponteiros

struct{
	byte jogadas;
	byte recorde;
	byte pontuacao;
}jogo;

char[][] imagens = {
	"",
	"",
	"",
	""
}

struct{
	coordenadas tela;
	coordenadas bola;
}tam

/* TIPOS * /


/* FUNÇÕES */

void insere(x,y,cor)
Bola get(x,y)
byte sortear()


*/

//init()
//imprime(b)
//insere(sortear(),x,y)


